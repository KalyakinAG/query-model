//МодельЗапроса = Общий.МодельЗапроса(ТекстЗапроса);
//МодельЗапроса = Общий.МодельЗапроса(Схема, Настройки, Истина);
//МодельЗапроса = Общий.МодельЗапроса(Список, Истина);
Функция МодельЗапроса(ТекстЗапроса = "", Настройки = "") Экспорт
	МодельЗапроса = Обработки.МодельЗапроса.Создать();
	ТипЗначенияТекстаЗапроса = ТипЗнч(ТекстЗапроса);
	
	Если ТипЗначенияТекстаЗапроса = Тип("СхемаКомпоновкиДанных") Тогда
		Возврат МодельЗапросаСхемыКомпоновкиДанных(ТекстЗапроса, Настройки);
	КонецЕсли;

	Если ТипЗначенияТекстаЗапроса = Тип("ТаблицаФормы") Тогда
		Возврат МодельЗапросаДинамическогоСписка(ТекстЗапроса);
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат МодельЗапроса;
	КонецЕсли;
	
	МодельЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Возврат МодельЗапроса;
КонецФункции

Функция МодельЗапросаСхемыКомпоновкиДанных(Схема, Настройки) Экспорт
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(Схема, Настройки);
	ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных[0].Запрос;
	//ТекстЗапроса = Схема.НаборыДанных[0].Запрос;
	МодельЗапроса = Общий.МодельЗапроса(ТекстЗапроса);//:МодельЗапроса = Обработки.МодельЗапроса.Создать();
	Для Каждого ЗначениеПараметра Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		МодельЗапроса.Параметр(ЗначениеПараметра.Имя, ЗначениеПараметра.Значение);
	КонецЦикла;
	Возврат МодельЗапроса;
КонецФункции

// Добавляет выбранное поле компоновки данных
//
// Параметры:
//	Куда		(КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, ВыбранныеПоляКомпоновкиДанных)
//	ИмяИлиПолеКД(Строка, ПолеКомпоновкиДанных)
//	Заголовок	(Строка) Необязательный
//
// Возвращаемое значение:
//	ВыбранноеПолеКД (ВыбранноеПолеКомпоновкиДанных)
//
Функция ДобавитьВыбранноеПоле(Куда, ИмяИлиПолеКД, Заголовок = "")
	
	Если ТипЗнч(Куда) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Настройки.Выбор;
	ИначеЕсли ТипЗнч(Куда) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Выбор;
	Иначе
		ВыбранныеПоляКД = Куда;
	КонецЕсли;
	
	Если ТипЗнч(ИмяИлиПолеКД) = Тип("Строка") Тогда
		ПолеКД = Новый ПолеКомпоновкиДанных(ИмяИлиПолеКД);
	Иначе
		ПолеКД = ИмяИлиПолеКД;
	КонецЕсли;
	
	ВыбранноеПолеКД = ВыбранныеПоляКД.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКД.Поле = ПолеКД;
	Если Заголовок <> "" Тогда
		ВыбранноеПолеКД.Заголовок = Заголовок;
	КонецЕсли;
	
	Возврат ВыбранноеПолеКД;
	
КонецФункции

// Добавляет отбор в коллекцию отборов компоновщика или группы отборов
//
// Параметры:
//	ЭлементСтруктуры- элемент структуры КД
//	Поле			- имя поля, по которому добавляется отбор
//	Значение		- значение отбора КД
//	ВидСравнения	- вид сравнений КД (по умолчанию: неопределено)
//	Использование	- признак использования отбора (по умолчанию: истина)
//	ВПользовательскиеНастройки - признак добавления в пользовательсие настройки КД (по умолчанию: ложь)
//
// Возвращаемое значение:
//	ЭлементОтбора (ЭлементОтбораКомпоновкиДанных)
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина, ВПользовательскиеНастройки = Ложь) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
		
		Если ВПользовательскиеНастройки Тогда
			Для Каждого ЭлементНастройки Из ЭлементСтруктуры.ПользовательскиеНастройки.Элементы Цикл
				Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ЭлементСтруктуры.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
					Отбор = ЭлементНастройки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ЭлементОтбора = Неопределено;
	Для каждого Элемент Из Отбор.Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Элемент.ЛевоеЗначение = Поле Тогда
			ЭлементОтбора = Элемент;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	ЭлементОтбора.Использование		= Использование;
	ЭлементОтбора.ЛевоеЗначение		= Поле;
	ЭлементОтбора.ВидСравнения		= ВидСравнения;
	ЭлементОтбора.ПравоеЗначение	= Значение;
	
	Возврат ЭлементОтбора;
	
КонецФункции

// Список - ТаблицаФормы - таблица, формируемая по динамическому списку
Функция МодельЗапросаДинамическогоСписка(Список) Экспорт
	Схема = Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	ПоляКлюча = Список.ТекущаяСтрока;
	Для Каждого ПолеКлюча Из ПоляКлюча Цикл
		ДобавитьОтбор(Настройки.Отбор, ПолеКлюча.Ключ, ПолеКлюча.Значение, ВидСравненияКомпоновкиДанных.Равно, Истина);
	КонецЦикла;
	Настройки.Структура[0].Выбор.Элементы.Очистить();
	Для Каждого ДоступноеПоле Из Настройки.Структура[0].Выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если ДоступноеПоле.Таблица ИЛИ ДоступноеПоле.Папка Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьВыбранноеПоле(Настройки.Структура[0].Выбор, ДоступноеПоле.Поле);
	КонецЦикла;
	МодельЗапроса = МодельЗапросаСхемыКомпоновкиДанных(Схема, Настройки);
	МодельЗапроса.ЗапросПакета.Порядок.Очистить();
	Возврат МодельЗапроса;
КонецФункции
